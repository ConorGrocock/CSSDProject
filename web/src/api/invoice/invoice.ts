/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const getApiInvoice = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/api/Invoice`,options
    );
  }


export const getGetApiInvoiceQueryKey = () => [`/api/Invoice`];

    
export const useGetApiInvoice = <TData = AsyncReturnType<typeof getApiInvoice>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiInvoice>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiInvoiceQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiInvoice>> = () => getApiInvoice(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiInvoice>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

export const getApiInvoiceId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/api/Invoice/${id}`,options
    );
  }


export const getGetApiInvoiceIdQueryKey = (id: number,) => [`/api/Invoice/${id}`];

    
export const useGetApiInvoiceId = <TData = AsyncReturnType<typeof getApiInvoiceId>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiInvoiceId>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiInvoiceIdQueryKey(id);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiInvoiceId>> = () => getApiInvoiceId(id, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiInvoiceId>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

