/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const getApiInvoice = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/api/Invoice`,options
    );
  }


export const getGetApiInvoiceQueryKey = () => [`/api/Invoice`];

    
export const useGetApiInvoice = <TData = AsyncReturnType<typeof getApiInvoice>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiInvoice>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiInvoiceQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiInvoice>> = () => getApiInvoice(axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiInvoice>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

export const getApiInvoicePaymentInvoiceId = (
    invoiceId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    return axios.get(
      `/api/Invoice/payment/${invoiceId}`,options
    );
  }


export const getGetApiInvoicePaymentInvoiceIdQueryKey = (invoiceId: number,) => [`/api/Invoice/payment/${invoiceId}`];

    
export const useGetApiInvoicePaymentInvoiceId = <TData = AsyncReturnType<typeof getApiInvoicePaymentInvoiceId>, TError = AxiosError<unknown>>(
 invoiceId: number, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiInvoicePaymentInvoiceId>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiInvoicePaymentInvoiceIdQueryKey(invoiceId);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiInvoicePaymentInvoiceId>> = () => getApiInvoicePaymentInvoiceId(invoiceId, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiInvoicePaymentInvoiceId>, TError, TData>(queryKey, queryFn, {enabled: !!(invoiceId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const postApiInvoiceConfirmationToken = (
    token: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/api/Invoice/confirmation/${token}`,undefined,options
    );
  }



    export const usePostApiInvoiceConfirmationToken = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiInvoiceConfirmationToken>, TError,{token: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiInvoiceConfirmationToken>, {token: string}> = (props) => {
          const {token} = props || {};

          return  postApiInvoiceConfirmationToken(token,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiInvoiceConfirmationToken>, TError, {token: string}, TContext>(mutationFn, mutationOptions)
    }
    