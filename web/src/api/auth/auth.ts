/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation,
  UseMutationOptions,
  MutationFunction
} from 'react-query'
import type {
  PostApiAuthRequestParams,
  PostApiAuthVerifyParams
} from '../api.schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const postApiAuthRequest = (
    params?: PostApiAuthRequestParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/api/Auth/request`,undefined,{
        params,
    ...options}
    );
  }



    export const usePostApiAuthRequest = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiAuthRequest>, TError,{params?: PostApiAuthRequestParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiAuthRequest>, {params?: PostApiAuthRequestParams}> = (props) => {
          const {params} = props || {};

          return  postApiAuthRequest(params,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiAuthRequest>, TError, {params?: PostApiAuthRequestParams}, TContext>(mutationFn, mutationOptions)
    }
    export const postApiAuthVerify = (
    params?: PostApiAuthVerifyParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/api/Auth/verify`,undefined,{
        params,
    ...options}
    );
  }



    export const usePostApiAuthVerify = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiAuthVerify>, TError,{params?: PostApiAuthVerifyParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiAuthVerify>, {params?: PostApiAuthVerifyParams}> = (props) => {
          const {params} = props || {};

          return  postApiAuthVerify(params,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiAuthVerify>, TError, {params?: PostApiAuthVerifyParams}, TContext>(mutationFn, mutationOptions)
    }
    