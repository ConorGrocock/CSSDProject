/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  Bill
} from '../api.schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const getApiBillBillId = (
    billId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Bill>> => {
    return axios.get(
      `/api/Bill/${billId}`,options
    );
  }


export const getGetApiBillBillIdQueryKey = (billId: string,) => [`/api/Bill/${billId}`];

    
export const useGetApiBillBillId = <TData = AsyncReturnType<typeof getApiBillBillId>, TError = AxiosError<unknown>>(
 billId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiBillBillId>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiBillBillIdQueryKey(billId);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiBillBillId>> = () => getApiBillBillId(billId, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiBillBillId>, TError, TData>(queryKey, queryFn, {enabled: !!(billId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

