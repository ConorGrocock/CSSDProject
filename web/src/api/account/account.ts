/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation,
  UseMutationOptions,
  MutationFunction
} from 'react-query'
import type {
  CreateAccountDto
} from '../api.schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const postApiAccount = (
    createAccountDto: CreateAccountDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `/api/Account`,
      createAccountDto,options
    );
  }



    export const usePostApiAccount = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postApiAccount>, TError,{data: CreateAccountDto}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postApiAccount>, {data: CreateAccountDto}> = (props) => {
          const {data} = props || {};

          return  postApiAccount(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postApiAccount>, TError, {data: CreateAccountDto}, TContext>(mutationFn, mutationOptions)
    }
    